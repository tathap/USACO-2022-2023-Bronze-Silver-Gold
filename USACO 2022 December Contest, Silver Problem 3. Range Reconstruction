USACO 2022 December Contest, Silver
Problem 3. Range Reconstruction

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 105;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

//Observation: Let ans[i] be the ith integer in our answer. Note that if we have computed the first i integers in our answer array, then ans[i+1] = ans[i] + grid[i-1][i] or ans[i+1] = ans[i] - grid[i-1][i], where grid[i-1][i] is the range of elements i-1 and i.
//Observation: We can set the first value of the array to anything we want, so let it be 0,
//Now we can compute the ith integer in our answer as follows, Check if the first value for ans[i+1] is compatible with previous ranges. If so, then we have found the ith integer for the answer. Otherwise, the ith integer must be the second value for ans[i+1], since we are guaranteed a solution in the problem statement

void solve(ll ca)
{
    ll n; cin >> n;
    
    ll grid[n][n];
    for (ll i = 0; i < n; i++) {
        for (ll j = i; j < n; j++) {
            cin >> grid[i][j];
        }
        for (ll j = 0; j < i; j++) {
            grid[i][j] = -1;
        }
    }
    
    ll ans[n];
    ans[0] = 0;
    
    for (ll i = 1; i < n; i++) {
        ll v1 = ans[i-1]+grid[i-1][i];
        ll v2 = ans[i-1]-grid[i-1][i];
        
        pair<ll, ll> p = {v1, v1};
        bool works = true;
        for (ll j = i-1; j >= 0; j--) {
            p.first = max(p.first, ans[j]);
            p.second = min(p.second, ans[j]);
            if ((p.first-p.second) != grid[j][i]) {
                works = false;
                break;
            }
        }
        
        if (works) {
            ans[i] = v1;
        } else {
            ans[i] = v2;
        }
    }
    
    for (ll i = 0; i < n; i++) {
        if (i == n-1) {
            cout << ans[i] << endl;
            return;
        }
        cout << ans[i] << " ";
    }
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    /*
    freopen("pails.in", "r", stdin);
    freopen("pails.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//listen to mall song
