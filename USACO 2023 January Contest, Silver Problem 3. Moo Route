USACO 2023 January Contest, Silver
Problem 3. Moo Route

Code:
//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 1e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

/*
 
ll maxsearch(ll lo, ll hi)
{
    lo--;
    while (lo < hi) {
        ll mid = lo + (hi - lo + 1)/2;
 
        if (works(mid)) {
            lo = mid;
        } else {
            hi = mid - 1;
        }
    }
    
    return lo;
}
 
ll minsearch(ll lo, ll hi)
{
    hi++;
    while (lo < hi) {
        ll mid = lo + (hi - lo)/2;
        if (works(mid)) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    
    return lo;
}
 */

//Observation: Note that it's always optimal to go immediately as far right as possible. Then, it's optimal to go left as much as possible, right as much as possible, and keep doing this until we've satisfied all the constraints. This will minimize the #of direction changes we need to make

void solve(ll ca)
{
    ll n; cin >> n;
    ll a[n+1]; //a[i] stores the #of times we need to cross the described point as in the input. However we will update it as we cross points.
    for (ll i = 0; i < n; i++) {
        cin >> a[i];
    }
    a[n] = 0;
    
    //Go right as far as possible
    string ans = "";
    for (ll i = 0; i < n; i++) {
        ans += 'R';
        a[i]--;
    }
    
    ll cur = n; //current position in [0, n]
    while (true) {
        //go left as far as possible
        while (cur > 0) {
            //If we can go left, and we don't need to go right anymore, then go left
            if (a[cur-1] == 1 && a[cur] == 0) {
                ans += 'L';
                cur--;
                a[cur]--;
            } else if (a[cur-1] > 1) { //Otherwise if we can go left, but we can come back later to the right to handle the constraints for more right points, then go left
                ans += 'L';
                cur--;
                a[cur]--;
            } else { //We can't go left anymore
                break;
            }
        }
        
        //If we're at the starting point and all the constraints are met, then end the loop.
        if (cur == 0 && a[cur] == 0) {
            break;
        }
        
        //Go right as far as possible as long as you're not going to points that can't be visited anymore
        while (cur < n) {
            if (a[cur] != 0) {
                ans += 'R';
                a[cur]--;
                cur++;
            } else {
                break;
            }
        }
    }
    
    //Print the answer
    cout << ans << endl;
    return;
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
